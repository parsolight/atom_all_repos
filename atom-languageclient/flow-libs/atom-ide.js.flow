export type atomIde$OutlineProvider = {
  name: string,
  // If there are multiple providers for a given grammar, the one with the highest priority will be
  // used.
  priority: number,
  grammarScopes: Array<string>,
  updateOnEdit?: boolean,
  getOutline: (editor: atom$TextEditor) => Promise<?Outline>,
};

export type atomIde$OutlineTree = {
  icon?: string, // from atom$Octicon | atom$OcticonsPrivate (types not allowed over rpc so we use string)

  // Must be one or the other. If both are present, tokenizedText is preferred.
  plainText?: string,
  tokenizedText?: TokenizedText,
  representativeName?: string,

  startPosition: atom$Point,
  endPosition?: atom$Point,
  children: Array<atomIde$OutlineTree>,
};

export type atomIde$Outline = {
  outlineTrees: Array<atomIde$OutlineTree>,
};

export type atomIde$TokenKind =
  | 'keyword'
  | 'class-name'
  | 'constructor'
  | 'method'
  | 'param'
  | 'string'
  | 'whitespace'
  | 'plain'
  | 'type';

export type atomIde$TextToken = {
  kind: atomIde$TokenKind,
  value: string,
};

export type atomIde$TokenizedText = Array<atomIde$TextToken>;

export type atomIde$DefinitionProvider = {
  name: string,
  priority: number,
  grammarScopes: Array<string>,
  getDefinition: (editor: atom$TextEditor, position: atom$Point) => Promise<?atomIde$DefinitionQueryResult>,
};

export type IdeUri = string;

export type atomIde$Definition = {
  path: IdeUri,
  position: atom$Point,
  range?: atom$Range,
  id?: string,
  name?: string,
  language: string,
  projectRoot?: IdeUri,
};

export type atomIde$DefinitionQueryResult = {
  queryRange: Array<atom$Range>,
  definitions: Array<atomIde$Definition>,
};

export type atomIde$FindReferencesProvider = {
  // Return true if your provider supports finding references for the provided TextEditor.
  isEditorSupported(editor: atom$TextEditor): Promise<boolean>,

  // `findReferences` will only be called if `isEditorSupported` previously returned true
  // for the given TextEditor.
  findReferences(editor: atom$TextEditor, position: atom$Point): Promise<?atomIde$FindReferencesReturn>,
};

export type atomIde$Reference = {
  uri: IdeUri, // URI of the file path
  name: ?string, // name of calling method/function/symbol
  range: atom$Range,
};

export type atomIde$FindReferencesData = {
  type: 'data',
  baseUri: IdeUri,
  referencedSymbolName: string,
  references: Array<atomIde$Reference>,
};

export type atomIde$FindReferencesError = {
  type: 'error',
  message: string,
};

export type atomIde$FindReferencesReturn = atomIde$FindReferencesData | atomIde$FindReferencesError;

export type atomIde$MarkedString =
  | {
      type: 'markdown',
      value: string,
    }
  | {
      type: 'snippet',
      grammar: atom$Grammar,
      value: string,
    };

// This omits the React variant.
export type atomIde$Datatip = {|
  markedStrings: Array<atomIde$MarkedString>,
  range: atom$Range,
  pinnable?: boolean,
|};

export type atomIde$DatatipProvider = {
  datatip(
    editor: atom$TextEditor,
    bufferPosition: atom$Point,
    // The mouse event that triggered the datatip.
    // This is null for manually toggled datatips.
    mouseEvent: ?MouseEvent,
  ): Promise<?Datatip>,
  validForScope(scopeName: string): boolean,
  // A unique name for the provider to be used for analytics.
  // It is recommended that it be the name of the provider's package.
  providerName: string,
};

export type atomIde$DatatipService = {
  addProvider(provider: atomIde$DatatipProvider): IDisposable,
};

export type atomIde$RangeCodeFormatProvider = {|
  formatCode: (editor: atom$TextEditor, range: atom$Range) => Promise<Array<atomIde$TextEdit>>,
  priority: number,
  grammarScopes: Array<string>,
|};

export type atomIde$TextEdit = {
  oldRange: atom$Range,
  newText: string,
  // If included, this will be used to verify that the edit still applies cleanly.
  oldText?: string,
};

export type atomIde$CodeHighlightProvider = {
  highlight(editor: atom$TextEditor, bufferPosition: atom$Point): Promise<?Array<atom$Range>>,
  priority: number,
  grammarScopes: Array<string>,
};

export type atomIde$DiagnosticType = 'Error' | 'Warning' | 'Info';

export type atomIde$Diagnostic = {
  providerName: string,
  type: atomIde$DiagnosticType,
  filePath: string,
  text?: string,
  range: atom$Range,
};

export interface atomIde$CodeAction {
  apply(): Promise<void>,
  getTitle(): Promise<string>,
  dispose(): void,
}

export type atomIde$CodeActionProvider = {
  grammarScopes: Array<string>,
  priority: number,
  getCodeActions(
    editor: atom$TextEditor,
    range: atom$Range,
    diagnostics: Array<atomIde$Diagnostic>,
  ): Promise<Array<CodeAction>>,
}

export type atomIde$BusySignalOptions = {|
  // Can say that a busy signal will only appear when a given file is open.
  // Default = null, meaning the busy signal applies to all files.
  onlyForFile?: NuclideUri,
  // Is user waiting for computer to finish a task? (traditional busy spinner)
  // or is the computer waiting for user to finish a task? (action required)
  // Default = spinner.
  waitingFor?: 'computer' | 'user',
  // Debounce it? default = true for busy-signal, and false for action-required.
  debounce?: boolean,
  // If onClick is set, then the tooltip will be clickable. Default = null.
  onDidClick?: () => void,
|};

export type atomIde$BusySignalService = {
  // Activates the busy signal with the given title and returns the promise
  // from the provided callback.
  // The busy signal automatically deactivates when the returned promise
  // either resolves or rejects.
  reportBusyWhile<T>(
    title: string,
    f: () => Promise<T>,
    options?: BusySignalOptions,
  ): Promise<T>,

  // Activates the busy signal. Set the title in the returned BusySignal
  // object (you can update the title multiple times) and dispose it when done.
  reportBusy(title: string, options?: BusySignalOptions): BusyMessage,

  // This is a no-op. When someone consumes the busy service, they get back a
  // reference to the single shared instance, so disposing of it would be wrong.
  dispose(): void,
};

export type atomIde$BusyMessage = {
  // You can set/update the title.
  setTitle(title: string): void,
  // Dispose of the signal when done to make it go away.
  dispose(): void,
};

export type atomIde$SignatureHelpRegistry = (provider: atomIde$SignatureHelpProvider) => IDisposable;

/**
 * Signature help is activated when:
 * - upon keystroke, any provider with a matching grammar scope contains
 *   the pressed key inside its triggerCharacters set
 * - the signature-help:show command is manually activated
 *
 * Once signature help has been triggered, the provider will be queried immediately
 * with the current cursor position, and then repeatedly upon cursor movements
 * until a null/empty signature is returned.
 *
 * Returned signatures will be displayed in a small datatip at the current cursor.
 * The highest-priority provider with a non-null result will be used.
 */
export type atomIde$SignatureHelpProvider = {
  priority: number,
  grammarScopes: Array<string>,

  // A set of characters that will trigger signature help when typed.
  // If a null/empty set is provided, only manual activation of the command works.
  triggerCharacters?: Set<string>,

  getSignatureHelp(editor: atom$TextEditor, point: atom$Point): Promise<?atomIde$SignatureHelp>,
};

export type atomIde$SignatureHelp = {
  signatures: Array<atomIde$Signature>,
  activeSignature?: number,
  activeParameter?: number,
};

export type atomIde$Signature = {
  label: string,
  documentation?: string,
  parameters?: Array<atomIde$SignatureParameter>,
};

export type atomIde$SignatureParameter = {
  label: string,
  documentation?: string,
};
